define(["exports"],(function(e){"use strict";try{self["workbox:core:6.6.0"]&&_()}catch(e){}const t=(()=>{"__WB_DISABLE_DEV_LOGS"in globalThis||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},r=function(r,a){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===r&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[r](...a);const s=e?[]:["%cworkbox",[`background: ${t[r]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[r](...s,...a),"groupCollapsed"===r&&(e=!0),"groupEnd"===r&&(e=!1)},a={},s=Object.keys(t);for(const e of s){const t=e;a[t]=(...e)=>{r(t,e)}}return a})(),r={"invalid-value":({paramName:e,validValueDescription:t,value:r})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of ${JSON.stringify(r)}.`},"not-an-array":({moduleName:e,className:t,funcName:r,paramName:a})=>{if(!(e&&t&&r&&a))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${a}' passed into '${e}.${t}.${r}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:r,className:a,funcName:s})=>{if(!(e&&t&&r&&s))throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into '${r}.${a?`${a}.`:""}${s}()' must be of type ${e}.`},"incorrect-class":({expectedClassName:e,paramName:t,moduleName:r,className:a,funcName:s,isReturnValueProblem:o})=>{if(!e||!r||!s)throw new Error("Unexpected input to 'incorrect-class' error.");const n=a?`${a}.`:"";return o?`The return value from '${r}.${n}${s}()' must be an instance of class ${e}.`:`The parameter '${t}' passed into '${r}.${n}${s}()' must be an instance of class ${e}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:r,className:a,funcName:s})=>{if(!(e&&t&&r&&a&&s))throw new Error("Unexpected input to 'missing-a-method' error.");return`${r}.${a}.${s}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownErrorMessage:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:r,paramName:a})=>`The supplied '${a}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${r} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:r,className:a,funcName:s,paramName:o})=>`The supplied '${o}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${r}.${a}.${s}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${r}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.statuses or config.headersin ${e}.${t}.${r}`,"invalid-string":({moduleName:e,funcName:t,paramName:r})=>{if(!r||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${r}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:r})=>`The start (${t}) and end (${r}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let r=`The strategy could not generate a response for '${e}'.`;return t&&(r+=` The underlying error is ${t}.`),r},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed`+(t?` with an HTTP status of ${t}.`:"."),"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`,"cross-origin-copy-response":({origin:e})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${e}.`,"opaque-streams-source":({type:e})=>{const t=`One of the workbox-streams sources resulted in an '${e}' response.`;return"opaqueredirect"===e?`${t} Please do not use a navigation request that results in a redirect as a source.`:`${t} Please ensure your sources are CORS-enabled.`}},a=(e,t={})=>{const a=r[e];if(!a)throw new Error(`Unable to find message for code '${e}'.`);return a(t)};class s extends Error{constructor(e,t){super(a(e,t)),this.name=e,this.details=t}}const o=(e,t,r)=>{if("function"!==typeof e[t])throw r.expectedMethod=t,new s("missing-a-method",r)},n=(e,t,r)=>{if(!(e instanceof t))throw r.expectedClassName=t.name,new s("incorrect-class",r)},i=(e,t,r)=>{if(!t.includes(e))throw r.validValueDescription=`Valid values are ${JSON.stringify(t)}.`,new s("invalid-value",r)},c=(e,t,r)=>{if(typeof e!==t)throw r.expectedType=t,new s("incorrect-type",r)};try{self["workbox:routing:6.6.0"]&&_()}catch(e){}const u=["DELETE","GET","HEAD","PATCH","POST","PUT"],h=e=>e&&"object"==typeof e?(o(e,"handle",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),e):(c(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),{handle:e});class l{constructor(e,t,r="GET"){c(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"match"}),r&&i(r,u,{paramName:"method"}),this.handler=h(t),this.match=e,this.method=r}setCatchHandler(e){this.catchHandler=h(e)}}class d extends l{constructor(e,r,a){n(e,RegExp,{moduleName:"workbox-routing",className:"RegExpRoute",funcName:"constructor",paramName:"pattern"});super((({url:r})=>{const a=e.exec(r.href);if(a){if(r.origin===location.origin||0===a.index)return a.slice(1);t.debug(`The regular expression '${e.toString()}' only partially matched against the cross-origin URL '${r.toString()}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`)}}),r,a)}}const p=e=>new URL(String(e),location.href).href.replace(new RegExp(`^${location.origin}`),"");class m{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",(e=>{const{request:t}=e,r=this.handleRequest({request:t,event:e});r&&e.respondWith(r)}))}addCacheListener(){self.addEventListener("message",(e=>{if(e.data&&"CACHE_URLS"===e.data.type){const{payload:r}=e.data;t.debug("Caching URLs from the window",r.urlsToCache);const a=Promise.all(r.urlsToCache.map((t=>{"string"==typeof t&&(t=[t]);const r=new Request(...t);return this.handleRequest({request:r,event:e})})));e.waitUntil(a),e.ports&&e.ports[0]&&a.then((()=>e.ports[0].postMessage(!0)))}}))}handleRequest({request:e,event:r}){n(e,Request,{moduleName:"workbox-routing",className:"Router",funcName:"handleRequest",paramName:"options.request"});const a=new URL(e.url,location.href);if(!a.protocol.startsWith("http"))return void t.debug("Workbox Router only supports URLs that start with 'http'.");const s=a.origin===location.origin,{params:o,route:i}=this.findMatchingRoute({event:r,request:e,sameOrigin:s,url:a});let c=i&&i.handler;const u=[];c&&(u.push(["Found a route to handle this request:",i]),o&&u.push(["Passing the following params to the route's handler:",o]));const h=e.method;if(!c&&this._defaultHandlerMap.has(h)&&(u.push(`Failed to find a matching route. Falling back to the default handler for ${h}.`),c=this._defaultHandlerMap.get(h)),!c)return void t.debug(`No route found for: ${p(a)}`);let l;t.groupCollapsed(`Router is responding to: ${p(a)}`),u.forEach((e=>{Array.isArray(e)?t.log(...e):t.log(e)})),t.groupEnd();try{l=c.handle({url:a,request:e,event:r,params:o})}catch(e){l=Promise.reject(e)}const d=i&&i.catchHandler;return l instanceof Promise&&(this._catchHandler||d)&&(l=l.catch((async s=>{if(d){t.groupCollapsed(`Error thrown when responding to:  ${p(a)}. Falling back to route's Catch Handler.`),t.error("Error thrown by:",i),t.error(s),t.groupEnd();try{return await d.handle({url:a,request:e,event:r,params:o})}catch(e){e instanceof Error&&(s=e)}}if(this._catchHandler)return t.groupCollapsed(`Error thrown when responding to:  ${p(a)}. Falling back to global Catch Handler.`),t.error("Error thrown by:",i),t.error(s),t.groupEnd(),this._catchHandler.handle({url:a,request:e,event:r});throw s}))),l}findMatchingRoute({url:e,sameOrigin:r,request:a,event:s}){const o=this._routes.get(a.method)||[];for(const n of o){let o;const i=n.match({url:e,sameOrigin:r,request:a,event:s});if(i)return i instanceof Promise&&t.warn(`While routing ${p(e)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`,n),o=i,(Array.isArray(o)&&0===o.length||i.constructor===Object&&0===Object.keys(i).length||"boolean"==typeof i)&&(o=void 0),{route:n,params:o}}return{}}setDefaultHandler(e,t="GET"){this._defaultHandlerMap.set(t,h(e))}setCatchHandler(e){this._catchHandler=h(e)}registerRoute(e){c(e,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),o(e,"match",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),c(e.handler,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),o(e.handler,"handle",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.handler"}),c(e.method,"string",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.method"}),this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new s("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(!(t>-1))throw new s("unregister-route-route-not-registered");this._routes.get(e.method).splice(t,1)}}let f;const g=()=>(f||(f=new m,f.addFetchListener(),f.addCacheListener()),f);try{self["workbox:strategies:6.6.0"]&&_()}catch(e){}const w={cacheWillUpdate:async({response:e})=>200===e.status||0===e.status?e:null},y={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},b=e=>[y.prefix,e,y.suffix].filter((e=>e&&e.length>0)).join("-"),N=e=>e||b(y.runtime);function $(e,t){const r=new URL(e);for(const e of t)r.searchParams.delete(e);return r.href}class v{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}const R=new Set;function x(e){return new Promise((t=>setTimeout(t,e)))}function k(e){return"string"==typeof e?new Request(e):e}class E{constructor(e,t){this._cacheKeys={},n(t.event,ExtendableEvent,{moduleName:"workbox-strategies",className:"StrategyHandler",funcName:"constructor",paramName:"options.event"}),Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new v,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const e of this._plugins)this._pluginStateMap.set(e,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:r}=this;let a=k(e);if("navigate"===a.mode&&r instanceof FetchEvent&&r.preloadResponse){const e=await r.preloadResponse;if(e)return t.log(`Using a preloaded navigation response for '${p(a.url)}'`),e}const o=this.hasCallback("fetchDidFail")?a.clone():null;try{for(const e of this.iterateCallbacks("requestWillFetch"))a=await e({request:a.clone(),event:r})}catch(e){if(e instanceof Error)throw new s("plugin-error-request-will-fetch",{thrownErrorMessage:e.message})}const n=a.clone();try{let e;e=await fetch(a,"navigate"===a.mode?void 0:this._strategy.fetchOptions),t.debug(`Network request for '${p(a.url)}' returned a response with status '${e.status}'.`);for(const t of this.iterateCallbacks("fetchDidSucceed"))e=await t({event:r,request:n,response:e});return e}catch(e){throw t.log(`Network request for '${p(a.url)}' threw an error.`,e),o&&await this.runCallbacks("fetchDidFail",{error:e,event:r,originalRequest:o.clone(),request:n.clone()}),e}}async fetchAndCachePut(e){const t=await this.fetch(e),r=t.clone();return this.waitUntil(this.cachePut(e,r)),t}async cacheMatch(e){const r=k(e);let a;const{cacheName:s,matchOptions:o}=this._strategy,n=await this.getCacheKey(r,"read"),i=Object.assign(Object.assign({},o),{cacheName:s});a=await caches.match(n,i),a?t.debug(`Found a cached response in '${s}'.`):t.debug(`No cached response found in '${s}'.`);for(const e of this.iterateCallbacks("cachedResponseWillBeUsed"))a=await e({cacheName:s,matchOptions:o,cachedResponse:a,request:n,event:this.event})||void 0;return a}async cachePut(e,r){const a=k(e);await x(0);const o=await this.getCacheKey(a,"write");{if(o.method&&"GET"!==o.method)throw new s("attempt-to-cache-non-get-request",{url:p(o.url),method:o.method});const e=r.headers.get("Vary");e&&t.debug(`The response for ${p(o.url)} has a 'Vary: ${e}' header. Consider setting the {ignoreVary: true} option on your strategy to ensure cache matching and deletion works as expected.`)}if(!r)throw t.error(`Cannot cache non-existent response for '${p(o.url)}'.`),new s("cache-put-with-no-response",{url:p(o.url)});const n=await this._ensureResponseSafeToCache(r);if(!n)return t.debug(`Response '${p(o.url)}' will not be cached.`,n),!1;const{cacheName:i,matchOptions:c}=this._strategy,u=await self.caches.open(i),h=this.hasCallback("cacheDidUpdate"),l=h?await async function(e,t,r,a){const s=$(t.url,r);if(t.url===s)return e.match(t,a);const o=Object.assign(Object.assign({},a),{ignoreSearch:!0}),n=await e.keys(t,o);for(const t of n)if(s===$(t.url,r))return e.match(t,a)}(u,o.clone(),["__WB_REVISION__"],c):null;t.debug(`Updating the '${i}' cache with a new Response for ${p(o.url)}.`);try{await u.put(o,h?n.clone():n)}catch(e){if(e instanceof Error)throw"QuotaExceededError"===e.name&&await async function(){t.log(`About to run ${R.size} callbacks to clean up caches.`);for(const e of R)await e(),t.log(e,"is complete.");t.log("Finished running callbacks.")}(),e}for(const e of this.iterateCallbacks("cacheDidUpdate"))await e({cacheName:i,oldResponse:l,newResponse:n.clone(),request:o,event:this.event});return!0}async getCacheKey(e,t){const r=`${e.url} | ${t}`;if(!this._cacheKeys[r]){let a=e;for(const e of this.iterateCallbacks("cacheKeyWillBeUsed"))a=k(await e({mode:t,request:a,event:this.event,params:this.params}));this._cacheKeys[r]=a}return this._cacheKeys[r]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const r of this.iterateCallbacks(e))await r(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if("function"==typeof t[e]){const r=this._pluginStateMap.get(t),a=a=>{const s=Object.assign(Object.assign({},a),{state:r});return t[e](s)};yield a}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve(null)}async _ensureResponseSafeToCache(e){let r=e,a=!1;for(const e of this.iterateCallbacks("cacheWillUpdate"))if(r=await e({request:this.request,response:r,event:this.event})||void 0,a=!0,!r)break;return a||(r&&200!==r.status&&(r=void 0),r&&200!==r.status&&(0===r.status?t.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`):t.debug(`The response for '${this.request.url}' returned a status code of '${e.status}' and won't be cached as a result.`))),r}}class q{constructor(e={}){this.cacheName=N(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,r="string"==typeof e.request?new Request(e.request):e.request,a="params"in e?e.params:void 0,s=new E(this,{event:t,request:r,params:a}),o=this._getResponse(s,r,t);return[o,this._awaitComplete(o,s,r,t)]}async _getResponse(e,r,a){let o;await e.runCallbacks("handlerWillStart",{event:a,request:r});try{if(o=await this._handle(r,e),!o||"error"===o.type)throw new s("no-response",{url:r.url})}catch(s){if(s instanceof Error)for(const t of e.iterateCallbacks("handlerDidError"))if(o=await t({error:s,event:a,request:r}),o)break;if(!o)throw s;t.log(`While responding to '${p(r.url)}', an ${s instanceof Error?s.toString():""} error occurred. Using a fallback response provided by a handlerDidError plugin.`)}for(const t of e.iterateCallbacks("handlerWillRespond"))o=await t({event:a,request:r,response:o});return o}async _awaitComplete(e,t,r,a){let s,o;try{s=await e}catch(o){}try{await t.runCallbacks("handlerDidRespond",{event:a,request:r,response:s}),await t.doneWaiting()}catch(e){e instanceof Error&&(o=e)}if(await t.runCallbacks("handlerDidComplete",{event:a,request:r,response:s,error:o}),t.destroy(),o)throw o}}const T=(e,t)=>`Using ${e} to respond to '${p(t.url)}'`,C=e=>{e&&(t.groupCollapsed("View the final response here."),t.log(e||"[No response returned]"),t.groupEnd())};e.NetworkFirst=class extends q{constructor(e={}){super(e),this.plugins.some((e=>"cacheWillUpdate"in e))||this.plugins.unshift(w),this._networkTimeoutSeconds=e.networkTimeoutSeconds||0,this._networkTimeoutSeconds&&c(this._networkTimeoutSeconds,"number",{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"constructor",paramName:"networkTimeoutSeconds"})}async _handle(e,r){const a=[];n(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"handle",paramName:"makeRequest"});const o=[];let i;if(this._networkTimeoutSeconds){const{id:t,promise:s}=this._getTimeoutPromise({request:e,logs:a,handler:r});i=t,o.push(s)}const c=this._getNetworkPromise({timeoutId:i,request:e,logs:a,handler:r});o.push(c);const u=await r.waitUntil((async()=>await r.waitUntil(Promise.race(o))||await c)());t.groupCollapsed(T(this.constructor.name,e));for(const e of a)t.log(e);if(C(u),t.groupEnd(),!u)throw new s("no-response",{url:e.url});return u}_getTimeoutPromise({request:e,logs:t,handler:r}){let a;return{promise:new Promise((s=>{a=setTimeout((async()=>{t.push(`Timing out the network response at ${this._networkTimeoutSeconds} seconds.`),s(await r.cacheMatch(e))}),1e3*this._networkTimeoutSeconds)})),id:a}}async _getNetworkPromise({timeoutId:e,request:t,logs:r,handler:a}){let s,o;try{o=await a.fetchAndCachePut(t)}catch(e){e instanceof Error&&(s=e)}return e&&clearTimeout(e),o?r.push("Got response from network."):r.push("Unable to get a response from the network. Will respond with a cached response."),!s&&o||(o=await a.cacheMatch(t),o?r.push(`Found a cached response in the '${this.cacheName}' cache.`):r.push(`No response found in the '${this.cacheName}' cache.`)),o}},e.NetworkOnly=class extends q{constructor(e={}){super(e),this._networkTimeoutSeconds=e.networkTimeoutSeconds||0}async _handle(e,r){let a,o;n(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"_handle",paramName:"request"});try{const t=[r.fetch(e)];if(this._networkTimeoutSeconds){const e=x(1e3*this._networkTimeoutSeconds);t.push(e)}if(o=await Promise.race(t),!o)throw new Error(`Timed out the network response after ${this._networkTimeoutSeconds} seconds.`)}catch(e){e instanceof Error&&(a=e)}if(t.groupCollapsed(T(this.constructor.name,e)),o?t.log("Got response from network."):t.log("Unable to get a response from the network."),C(o),t.groupEnd(),!o)throw new s("no-response",{url:e.url,error:a});return o}},e.clientsClaim=function(){self.addEventListener("activate",(()=>self.clients.claim()))},e.registerRoute=function(e,r,a){let o;if("string"==typeof e){const n=new URL(e,location.href);{if(!e.startsWith("/")&&!e.startsWith("http"))throw new s("invalid-string",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});const r=e.startsWith("http")?n.pathname:e,a="[*:?+]";new RegExp(`${a}`).exec(r)&&t.debug(`The '$capture' parameter contains an Express-style wildcard character (${a}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`)}o=new l((({url:r})=>(r.pathname===n.pathname&&r.origin!==n.origin&&t.debug(`${e} only partially matches the cross-origin URL ${r.toString()}. This route will only handle cross-origin requests if they match the entire URL.`),r.href===n.href)),r,a)}else if(e instanceof RegExp)o=new d(e,r,a);else if("function"==typeof e)o=new l(e,r,a);else{if(!(e instanceof l))throw new s("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});o=e}return g().registerRoute(o),o}}));